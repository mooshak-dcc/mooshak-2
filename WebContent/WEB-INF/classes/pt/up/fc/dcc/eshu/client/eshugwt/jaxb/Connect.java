//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.10.19 at 11:31:31 AM WEST 
//


package pt.up.fc.dcc.eshu.client.eshugwt.jaxb;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Connect complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Connect">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attribute name="with" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="to" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="max" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="min" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Connect")
public class Connect {

    @XmlAttribute(name = "with", required = true)
    protected String with;
    @XmlAttribute(name = "to", required = true)
    protected String to;
    @XmlAttribute(name = "max", required = true)
    protected String max;
    @XmlAttribute(name = "min", required = true)
    protected String min;

    /**
     * Gets the value of the with property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWith() {
        return with;
    }

    /**
     * Sets the value of the with property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWith(String value) {
        this.with = value;
    }

    /**
     * Gets the value of the to property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTo() {
        return to;
    }

    /**
     * Sets the value of the to property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTo(String value) {
        this.to = value;
    }

    /**
     * Gets the value of the max property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMax() {
        return max;
    }

    /**
     * Sets the value of the max property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMax(String value) {
        this.max = value;
    }

    /**
     * Gets the value of the min property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMin() {
        return min;
    }

    /**
     * Sets the value of the min property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMin(String value) {
        this.min = value;
    }
    
    public int getMaxInt(){
    	if (this.max.equals("unbounded")) return Integer.MAX_VALUE; 
    	return Integer.parseInt(this.max);
    }
    
    public int getMinInt(){
    	if (this.min.equals("unbounded")) return Integer.MAX_VALUE; 
    	return Integer.parseInt(this.min);
    }
    
	@Override
	public String toString() {
		return "{ \"with_\":" + "\"" +with+"\"" + ", \"to\":" +"\""+ to +"\"" + ", \"max\":" + "\"" + max +"\""+ ", \"min\":" +"\""+ min +"\""+ "}";
	}
    
	public boolean isConnectionValid(String with, int value){
		if( this.getMaxInt() >= value && 
			this.getMinInt() <= value  && 
			(getWith().equals("all") ||  
			this.getWith().equals(with))) 
			return true;
		return false;
	}
	
	public boolean isConnectionValid(String with, String to){
		if( this.getWith().equals(with) &&  this.getTo().equals(to))
			return true;
		else if(getWith().equals("all") && this.getTo().equals(to))
			return true;
		else if(this.getWith().equals(with) && getTo().equals("all"))
			return true;
		else if(this.getWith().equals("all") && getTo().equals("all"))
			return true;
		return false;
	}
	
	



}
